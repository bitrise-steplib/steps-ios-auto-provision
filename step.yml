title: iOS Auto Provision
summary: Automatically manages your iOS Provisioning Profiles for your Xcode project
description: |-
  ### Automatically manages your iOS Provisioning Profiles for your Xcode project.

  __Setup guide__: [https://blog.bitrise.io/ios-auto-provision-step](https://blog.bitrise.io/ios-auto-provision-step)

  In case of __Xcode managed codesigning__ projects:

  - downloads the __Xcode managed Provisioning Profiles__ and installs for the build
  - installs the provided __Codesigning Certificates__ into the Keychain

  In case of __Manual codesigning__ projects:

  - ensures that the __Application Identifier__ exists on the Apple Developer Portal
  - ensures that the __project's Capabilities__ are set correctly in the Application Identifier
  - ensures that the __Provisioning Profiles__ exists on the Apple Developer Portal and are installed for the build
  - ensure that all the available __Test Devices__ exists on the Apple Developer Portal and are included in the Provisioning Profiles
  - installs the provided __Codesigning Certificates__ into the Keychain
website: https://github.com/bitrise-steplib/steps-ios-auto-provision
source_code_url: https://github.com/bitrise-steplib/steps-ios-auto-provision
support_url: https://github.com/bitrise-steplib/steps-ios-auto-provision/issues

host_os_tags:
  - osx-10.10
  - ubuntu-16.04

project_type_tags:
  - ios

type_tags:
  - code-sign

is_requires_admin_user: true
is_always_run: false
is_skippable: false
run_if: ".IsCI"

inputs:
- distribution_type: development
  opts:
    title: Distribution type
    description: Describes how Xcode should sign your project.
    value_options:
    - "development"
    - "app-store"
    - "ad-hoc"
    - "enterprise"
    is_required: true
- team_id:
  opts:
    title: The Developer Portal team id
    description: |-
      The Developer Portal team to manage the project's codesigning files.

      __If your Developer Portal Account belongs to multiple development team, this input is required!__   
      Otherwise specify this input if you want to manage the Provisioning Profiles with different team, then the one set in your project.

      If you leave it empty the project defined team will be used.

      __Example:__ `1MZX23ABCD4`
- project_path: $BITRISE_PROJECT_PATH
  opts:
    title: Xcode Project (or Workspace) path
    description: A `.xcodeproj` or `.xcworkspace` path.
    is_required: true
- scheme: $BITRISE_SCHEME
  opts:
    title: Scheme name
    description: The Xcode Scheme to use.
    is_required: true
- configuration:
  opts:
    title: Configuration name
    description: |-
      The Xcode Configuration to use. 
      
      By default your Scheme defines which Configuration (Debug, Release, ...) should be used,
      but you can overwrite it with this option.
- generate_profiles: "no"
  opts:
    title: Should the step try to generate Provisioning Profiles even if Xcode managed signing is enabled in the Xcode project?
    description: |-
      In case of __Xcode managed codesigning__ projects, by default the step downloads and installs the Xcode managed Provisioning Profiles.

      If this input is set to: `yes`, the step will try to manage the Provisioning Profiles by itself (__like in case of Manual codesigning projects__),  
      the step will fall back to use the Xcode managed Provisioning Profiles in case of an issue.

      __This input has no effect in case of Manual codesigning projects.__
    value_options:
    - "yes"
    - "no"
- verbose_log: "no"
  opts:
    category: Debug
    title: Enable verbose logging?
    description: Enable verbose logging?
    is_required: true
    value_options:
    - "yes"
    - "no"
- certificate_urls: $BITRISE_CERTIFICATE_URL
  opts:
    category: Debug
    title: Certificate URL
    description: |
      URLs of the certificates to download.

      Multiple URLs can be specified, separated by a pipe (`|`) character,  
      you can specify a local path as well, using the `file://` scheme.

      __Provide a development certificate__ url, to ensure development code sign files for the project and __also provide a distribution certificate__ url, to ensure distribution code sign files for your project.

      __Example:__ `file://./development/certificate/path|https://distribution/certificate/url`
    is_required: true
- passphrases: $BITRISE_CERTIFICATE_PASSPHRASE
  opts:
    category: Debug
    title: Certificate passphrase
    description: |
      Certificate passphrases.

      Multiple passphrases can be specified, separated by a pipe (`|`) character.

      __Specified certificate passphrase count should match the count of the certificate urls.__

      __Example__ (1 certificate with empty passphrase, 1 certificate with non-empty passphrase): `|distribution-passphrase`
    is_required: true
- keychain_path: $HOME/Library/Keychains/login.keychain
  opts:
    category: Debug
    title: Keychain path
    description: The Keychain path.
    is_required: true
- keychain_password: $BITRISE_KEYCHAIN_PASSWORD
  opts:
    category: Debug
    title: Keychain's password
    description: The Keychain's password.
    is_required: true
- build_url: $BITRISE_BUILD_URL
  opts:
    category: Debug
    title: Bitrise build url
    description: Bitrise build url.
    is_required: true
- build_api_token: $BITRISE_BUILD_API_TOKEN
  opts:
    category: Debug
    title: Bitrise build api token
    description: Bitrise build api token.
    is_required: true
outputs:
  - BITRISE_EXPORT_METHOD:
    opts:
      title: "The selected distribution type"